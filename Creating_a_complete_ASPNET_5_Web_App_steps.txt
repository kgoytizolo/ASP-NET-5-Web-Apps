Creación de aplicación Web ASP NET 5 - Mi Librería - usando: 

1. HTML5 + CSS
2. JavaScript
3. MVC 6
4. Bootstrap
5. Entity Framework 7
6. Angular JS

****************************************************************************************************************************************

Un resumen de la nueva estructura de la aplicación web ASPNET 5 :)

- Carpeta src		: Contiene todos los proyectos que incluyen el código fuente que conforma la aplicación.
- Archivo global.json	: Acá se ponen las configuraciones a nivel de la solución de Visual Studio, y es donde se permiten las referencias de proyecto a proyecto.
- Carpeta wwwroot	: Contiene todos los archivos estáticos (html, css, imágenes, javascript, etc) a ser mostrados del lado del cliente.
- project.json		: Contiene configuraciones a nivel del proyecto.
- startup.cs		: Acá se configura el inicio de la carga de la aplicación web, sea vía IIS Express o por línea de comandos (dnx web).

1. HTML5 + CSS
   - Como es que ASP.NET 5 entrega archivos estáticos? (
   	- Desde la opción Startup.cs (Para iniciar la aplicación web) > función Configure(IApplicationBuilder app) > se debe hacer la llamada al html 
   	  de página de inicio.
   	- Inicialmente, sólo llamamos a una cadena "Hello World" cuando VS 2015 genera una plantilla en blanco. Y se podría enviar una cadena de html para mostrar 
   	  información, pero lo correcto es derivar a una página de inicio.
   	- Para ello se configuran los archivos estáticos (Static Files) desde la carpeta origen (wwwroot) para que se levante como página de inicio.
   	- A partir de la carpeta wwwroot (debajo de las referencias o librerías del proyecto) podemos agregar la página de inicio y otras páginas que 
   	  conformen la aplicación web a nivel cliente. Esta sería la raíz de los archivos html.
   	  Ejemplo: Crear index.html
   	- Ahora, borramos o comentamos todo el código dentro de la función Configure(IApplicationBuilder app) y levantamos la app desde IIS Express
   	- Importante:
   		- Cuando ejecutamos la aplicación mediante IIS Express, interpretará directamente que hay archivos estáticos dentro de wwwroot y los llama
   		- En cambio si ejecutamos la aplicación desde dnx web, está acostumbrado a ejecutar desde el Startup.cs. Si desde ahí no se define que 
   		  se tiene que llamar a una página estática habrán problemas. Aparte, el hosting está en otro puerto (5000) en vez del 8000 y habrán 
   		  problemas para llamarlo.
   		  
   	- Remmplazar código borrado por: app.UseStaticFiles();		
   		- Añadir el paquete: Microsoft.AspNet.StaticFiles dentro de 1.0.0-rc1-final
   		- Visual Studio 2015 e indica el fix. Cuando lo aceptas (click derecho, añadir fix)
   		- Visual Studio 2015 hace un restore del package y ahora ya se compila normalazo
   		- Si revisamos el archivo project.json, se incluye la librería requerida dentro de la sección "dependencias" de la siguiente forma:
   		
		  "dependencies": {
		    "Microsoft.AspNet.IISPlatformHandler": "1.0.0-rc1-final",
		    "Microsoft.AspNet.Server.Kestrel": "1.0.0-rc1-final",
		    "Microsoft.AspNet.StaticFiles": "1.0.0-rc1-final"		//También se puede incluir manualmente y dar rebuild al proyecto :)
		  },   									  
   									  
   	- Definir el archivo Index.html como html de inicio (por defecto):	
   		- Adicionar app.UseDefaultFiles(); 				//La clase instanciada app (ApplicationBuilder) puede acceder a este método
   										//para configurar el archivo por defecto. 
   										//Importante: tiene que estar antes de "app.UseStaticFiles();"
   										
   	- Así tiene que quedar al final la función Configure dentro de Startup.cs. Levantamos el IIS Express y vemos que ahora sí accedemos al archivo index.html
   	
         public void Configure(IApplicationBuilder app)  	
        {
            app.UseDefaultFiles();
            app.UseStaticFiles();
        }   
   
   - Diseño actual de páginas con HTML5 y CSS
   	- <!DOCTYPE html>								//Para aplicaciones HTML5
   	- Uso de DIVs para poner secciones como principal, header, footer, etc.
   	- Uso de CSS para los estilos de la página web. Se divide en 3 partes:
   		- Style Tags:		Son los estilos que se ponen dentro de un tag HTML específico
   		- Style Blocks:		Son los estilos que se ponen dentro de la sección <header></header>. Puede ser uno o más estilos agrupados
   		- Stylesheets:		Son los estilos que se ponen dentro de un archivo *.css aparte y que son llamados dentro de la sección <header></header>
   	- Uso de CSS selectors para definir que tanto va a abarcar el cambio en los elementos HTML de una página
   	- The Box Model (para aplicar diseño de páginas web):
   		- Margin > Border > Padding > Content  
   		- left / right / bottom / top
   		- height / width

-----------------------------------------------------------------------------------------------------------------------------------------------------------

2. JavaScript
	- Usando el lenguaje por el lado del cliente para las aplicaciones web.
	- Lenguaje orientado a objetos. Su herencia es de Prototipos en vez de clases.
	- Es dinámica: no tiene tipo, pero tiene tipado dinámico
	- La compilación es JIT (Just in Time) pero sin un formato intermediario (como MSIL, ByteCode), se interpreta con el navegador.
	- Investigar Intellisense in JavaScript
	- Se recomienda como mejores prácticas, poner al final de la página web el <script type="text/javascript"> para que primero se parsee todo y luego
	  interprete los cambios que necesita (porque ya existen todos los elementos web).
	- Con javascript podemos capturar eventos de los elementos HTML para que hagan una respectiva acción dentro de otras funciones Javascript
	- No olvidar ver que elementos son compatibles con ciertos navegadores.. verificar eso para prevenir que funcione mal en un navegador y bien en otro
	- Las funciones sirven para que la lógica javascript sea ejecutada a partir de ciertos eventos o elementos definidos. 
	- En caso del alcance total (global scope) es mayormente para definir variables globales o acciones que realice toda la página web ni bien se llame 
	  a ese archivo javascript. Para limitar el alcance global, definir en funciones las acciones a realizar.
	- Alcance global: lógica fuera de las funciones javascript
	
//Function outside global scope (dentro del archivo Javascript)
(function startup() {
    var main = document.getElementById("main");
    main.onmouseenter = function () {
        main.style = "background-color: #FFF;";
    };
    main.onmouseleave = function () {
        main.style = "background-color: antiquewhite;";
    };
})();	

   - Uso de Bower: 
	- A partir de Visual 2012 en adelante, se han usado extensiones de componentes a través de aplicaciones externas desde NuGet (como los plugins de
	  Eclipse). Esto se usaba tanto por el lado del cliente, como del servidor. 
	- Ahora, se sigue usando NuGet, pero solo para las dependencias del lado del servidor. Para los paquetes de dependencias de lado del cliente,
	  se usa Bower. Es porque ahora la comunidad de desarrolladores exige que se generen paquetes del lado del cliente. Por eso ASPNET 5 adopta Bower.
	- Utilizando el archivo de configuración Bower (a nivel de proyecto):
		- Add New Item > Client Side > Bower Configuration File > 
		- Dentro del archivo bower.json se agregan todas las dependencias a nivel de cliente requeridas (bootstrap, jquery, etc)
		- Entre las configuraciones del archivo, en la parte de dependencias, agregar "underscore" para indicar la versión del paquete 
		  a instalar (puede ser el actual o el versiones anteriores en caso de manejar aplicaciones web de versiones anteriores).
		- Luego de indicar y grabar la versión de la dependencia > underscore > se autogenera una carpeta a nivel de la carpeta raíz wwwroot "lib"
		- La carpeta lib > underscore > aparte de los archivos de la configuración json, agrega la librería JS (dependencia) requerida:
		  underscore.js y se guarda su versión minificada / comprimida (underscore-min.js)
		- En el archivo bower.json genérico > verificar .bowerrc > Contiene el directorio por defecto donde se instalarán las dependencias JS
		- Repetir el mismo proceso para la dependencia "jquery" (última versión). Los archivos de la dependencia jquery también aparece dentro de la 
		  carpeta: wwwroot > lib > jquery
   - Uso de JQuery: con $
	- Investigar en tutoriales o W3 Schools    

-----------------------------------------------------------------------------------------------------------------------------------------------------------

3. MVC 6


4. Bootstrap


5. Entity Framework 7


6. Angular JS

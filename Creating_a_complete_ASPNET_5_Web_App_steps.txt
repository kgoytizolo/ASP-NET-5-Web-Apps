Creación de aplicación Web ASP NET 5 - Mi Librería - usando: 

1. HTML5 + CSS
2. JavaScript
3. MVC 6
4. Bootstrap
5. Entity Framework 7
6. Angular JS

****************************************************************************************************************************************

Un resumen de la nueva estructura de la aplicación web ASPNET 5 :)

- Carpeta src		: Contiene todos los proyectos que incluyen el código fuente que conforma la aplicación.
- Archivo global.json	: Acá se ponen las configuraciones a nivel de la solución de Visual Studio, y es donde se permiten las referencias de proyecto a proyecto.
- Carpeta wwwroot	: Contiene todos los archivos estáticos (html, css, imágenes, javascript, etc) a ser mostrados del lado del cliente.
- project.json		: Contiene configuraciones a nivel del proyecto.
- startup.cs		: Acá se configura el inicio de la carga de la aplicación web, sea vía IIS Express o por línea de comandos (dnx web).

1. HTML5 + CSS
   - Como es que ASP.NET 5 entrega archivos estáticos? (
   	- Desde la opción Startup.cs (Para iniciar la aplicación web) > función Configure(IApplicationBuilder app) > se debe hacer la llamada al html 
   	  de página de inicio.
   	- Inicialmente, sólo llamamos a una cadena "Hello World" cuando VS 2015 genera una plantilla en blanco. Y se podría enviar una cadena de html para mostrar 
   	  información, pero lo correcto es derivar a una página de inicio.
   	- Para ello se configuran los archivos estáticos (Static Files) desde la carpeta origen (wwwroot) para que se levante como página de inicio.
   	- A partir de la carpeta wwwroot (debajo de las referencias o librerías del proyecto) podemos agregar la página de inicio y otras páginas que 
   	  conformen la aplicación web a nivel cliente. Esta sería la raíz de los archivos html.
   	  Ejemplo: Crear index.html
   	- Ahora, borramos o comentamos todo el código dentro de la función Configure(IApplicationBuilder app) y levantamos la app desde IIS Express
   	- Importante:
   		- Cuando ejecutamos la aplicación mediante IIS Express, interpretará directamente que hay archivos estáticos dentro de wwwroot y los llama
   		- En cambio si ejecutamos la aplicación desde dnx web, está acostumbrado a ejecutar desde el Startup.cs. Si desde ahí no se define que 
   		  se tiene que llamar a una página estática habrán problemas. Aparte, el hosting está en otro puerto (5000) en vez del 8000 y habrán 
   		  problemas para llamarlo.
   		  
   	- Remmplazar código borrado por: app.UseStaticFiles();		
   		- Añadir el paquete: Microsoft.AspNet.StaticFiles dentro de 1.0.0-rc1-final
   		- Visual Studio 2015 e indica el fix. Cuando lo aceptas (click derecho, añadir fix)
   		- Visual Studio 2015 hace un restore del package y ahora ya se compila normalazo
   		- Si revisamos el archivo project.json, se incluye la librería requerida dentro de la sección "dependencias" de la siguiente forma:
   		
		  "dependencies": {
		    "Microsoft.AspNet.IISPlatformHandler": "1.0.0-rc1-final",
		    "Microsoft.AspNet.Server.Kestrel": "1.0.0-rc1-final",
		    "Microsoft.AspNet.StaticFiles": "1.0.0-rc1-final"		//También se puede incluir manualmente y dar rebuild al proyecto :)
		  },   									  
   									  
   	- Definir el archivo Index.html como html de inicio (por defecto):	
   		- Adicionar app.UseDefaultFiles(); 				//La clase instanciada app (ApplicationBuilder) puede acceder a este método
   										//para configurar el archivo por defecto. 
   										//Importante: tiene que estar antes de "app.UseStaticFiles();"
   										
   	- Así tiene que quedar al final la función Configure dentro de Startup.cs. Levantamos el IIS Express y vemos que ahora sí accedemos al archivo index.html
   	
         public void Configure(IApplicationBuilder app)  	
        {
            app.UseDefaultFiles();
            app.UseStaticFiles();
        }   
   
   - Diseño actual de páginas con HTML5 y CSS
   	- <!DOCTYPE html>								//Para aplicaciones HTML5
   	- Uso de DIVs para poner secciones como principal, header, footer, etc.
   	- Uso de CSS para los estilos de la página web. Se divide en 3 partes:
   		- Style Tags:		Son los estilos que se ponen dentro de un tag HTML específico
   		- Style Blocks:		Son los estilos que se ponen dentro de la sección <header></header>. Puede ser uno o más estilos agrupados
   		- Stylesheets:		Son los estilos que se ponen dentro de un archivo *.css aparte y que son llamados dentro de la sección <header></header>
   	- Uso de CSS selectors para definir que tanto va a abarcar el cambio en los elementos HTML de una página
   	- The Box Model (para aplicar diseño de páginas web):
   		- Margin > Border > Padding > Content  
   		- left / right / bottom / top
   		- height / width

-----------------------------------------------------------------------------------------------------------------------------------------------------------

2. JavaScript
	- Usando el lenguaje por el lado del cliente para las aplicaciones web.
	- Lenguaje orientado a objetos. Su herencia es de Prototipos en vez de clases.
	- Es dinámica: no tiene tipo, pero tiene tipado dinámico
	- La compilación es JIT (Just in Time) pero sin un formato intermediario (como MSIL, ByteCode), se interpreta con el navegador.
	- Investigar Intellisense in JavaScript
	- Se recomienda como mejores prácticas, poner al final de la página web el <script type="text/javascript"> para que primero se parsee todo y luego
	  interprete los cambios que necesita (porque ya existen todos los elementos web).
	- Con javascript podemos capturar eventos de los elementos HTML para que hagan una respectiva acción dentro de otras funciones Javascript
	- No olvidar ver que elementos son compatibles con ciertos navegadores.. verificar eso para prevenir que funcione mal en un navegador y bien en otro
	- Las funciones sirven para que la lógica javascript sea ejecutada a partir de ciertos eventos o elementos definidos. 
	- En caso del alcance total (global scope) es mayormente para definir variables globales o acciones que realice toda la página web ni bien se llame 
	  a ese archivo javascript. Para limitar el alcance global, definir en funciones las acciones a realizar.
	- Alcance global: lógica fuera de las funciones javascript
	
//Function outside global scope (dentro del archivo Javascript)
(function startup() {
    var main = document.getElementById("main");
    main.onmouseenter = function () {
        main.style = "background-color: #FFF;";
    };
    main.onmouseleave = function () {
        main.style = "background-color: antiquewhite;";
    };
})();	

   - Uso de Bower: 
	- A partir de Visual 2012 en adelante, se han usado extensiones de componentes a través de aplicaciones externas desde NuGet (como los plugins de
	  Eclipse). Esto se usaba tanto por el lado del cliente, como del servidor. 
	- Ahora, se sigue usando NuGet, pero solo para las dependencias del lado del servidor. Para los paquetes de dependencias de lado del cliente,
	  se usa Bower. Es porque ahora la comunidad de desarrolladores exige que se generen paquetes del lado del cliente. Por eso ASPNET 5 adopta Bower.
	- Utilizando el archivo de configuración Bower (a nivel de proyecto):
		- Add New Item > Client Side > Bower Configuration File > 
		- Dentro del archivo bower.json se agregan todas las dependencias a nivel de cliente requeridas (bootstrap, jquery, etc)
		- Entre las configuraciones del archivo, en la parte de dependencias, agregar "underscore" para indicar la versión del paquete 
		  a instalar (puede ser el actual o el versiones anteriores en caso de manejar aplicaciones web de versiones anteriores).
		- Luego de indicar y grabar la versión de la dependencia > underscore > se autogenera una carpeta a nivel de la carpeta raíz wwwroot "lib"
		- La carpeta lib > underscore > aparte de los archivos de la configuración json, agrega la librería JS (dependencia) requerida:
		  underscore.js y se guarda su versión minificada / comprimida (underscore-min.js)
		- En el archivo bower.json genérico > verificar .bowerrc > Contiene el directorio por defecto donde se instalarán las dependencias JS
		- Repetir el mismo proceso para la dependencia "jquery" (última versión). Los archivos de la dependencia jquery también aparece dentro de la 
		  carpeta: wwwroot > lib > jquery
   - Uso de JQuery: con $
	- Investigar en tutoriales o W3 Schools    

-----------------------------------------------------------------------------------------------------------------------------------------------------------

3. MVC 6
	- Es la aplicación framework del lado del servidor, que implementa la arquitectura MVC (Modelo Vista Controlador). Donde:
		- Modelo: 	Representa los datos devueltos por las entidades.
		- Vista: 	Representa lo que devolvemos a la vista del usuario
		- Controlador:	Interacción entre modelo y vista con manejo de eventos - renderización
    - Como crear aplicaciones MVC 6 - ASPNET 5?
	- En la clase Startup.cs se define nuevamente dentro de la función Configure(IApplicationBuilder app) el tipo de aplicación que queremos usar. 
	- Anteriormente, definimos la configuración para mostrar un sitio de páginas estáticas HTML, pero ahora se indicará que usaremos una aplicación MVC.
	- Quitamos app.UseDefaultFiles(); y mantenemos app.UseStaticFiles(); 	
	- En la clase Startup.cs, habilitamos el uso de aplicaciones MVC dentro de la función ConfigureServices(IServiceCollection services) de la siguiente
	  manera: 	services.AddMvc(); 
	- Para configurar el framework Mvc y funcione, ir a la carpeta project.json y adicionar la dependencia requerida para MVC:
		- "Microsoft.AspNet.Mvc": "6.0.0-rc1-final"	//Se puede agregar como fix también
	- Volvemos a Startup.cs, y terminamos de habilitar el uso de aplicaciones MVC dentro de la función Configure(IApplicationBuilder app):
		- app.UseMvc();			//Debajo de app.UseStaticFiles(); pero hay que configurarlo así:
		
            app.UseMvc(config => {						//Llama a RouteBuilder	
                config.MapRoute(						//Realiza el mapeo de la ruta a mostrar
                    name: "Default",						//Nombre por defecto a llamarlo
                    template: "{controller}/{action}/{id?}",			//Modelo a seguir de la URL (controlador/accion/Id *en caso aplica)
                    defaults: new { controller = "App", Action = "Index" }	//Configuración exclusiva del controlador por defecto (App) y su acción (Index)
                );
            });		
									
	- Creamos una carpeta llamada "Controllers" a nivel del proyecto. Dentro de esta carpeta, se crearán subcarpetas Web y Api.
	- Creamos una carpeta llamada "Views" a nivel del proyecto. Dentro de esa carpeta, se crean las vistas por controlador (debe tener el mismo formato):
		- Controlador: 	NombreADefinirController.cs 
				El controlador hereda de la clase genérica Controller todas las características básicas para manejo de MVC
				
		- Vista:	NombreADefinir.cshtml
	- Dentro del controlador, definir el evento de Index 
	- Dentro de la vista (replicar html estático y colocar el siguiente código dinámico al inicio de la página): 
	
		@{ 
		    ViewBag.Title = "Home Page";
		}	
	
	  *Uso del lenguaje de marcado Razor (interpreta lenguaje C#)
	 
	- Importante: Antes de ejecutar el aplicativo, configurar nuevamente las rutas de las llamadas a los archivos css y js dentro de los htmls. 
	  Asume por defecto que está dentro de wwwroot, pero hay que definir para que la ruta / url a llamar desde la app MVC con lo que queremos que haga
	  cargue estos archivos:
	  
	  Anteponer a cada ruta el caracter "toggle" (~) así (dentro de Index.cshtml): 	
	  <link rel="stylesheet" href="~/css/mainSite.css" />
	  
	  Esto hace que el hosting busque la ruta donde sea que esté en la aplicación y la genera.
	  
	  Ahora, si entras ya sea con:
	  http://localhost:8000
	  como con:
	  http://localhost:8000/app/Index
	  Se verá igual :)
	  
	- Creando la vista de diseño:
		- Es una vista tipo cshtml, pero que será compartida por 2 o más controladores.
		- Se crea dentro de la carpeta Views > Crear carpeta "Shared" > Archivo: _Layout.cshtml (Mvc View Layout Page).
		- Se pone todo lo que se usa @RenderBody() es el contenedor de las vistas por controlador
		- Una estructura que se use siempre se puede usar en la vista de diseño
		- Además se tiene que adicionar otro archivo de tipo MVC View Start Page (para inicializar el view layout page inicial).
	- Para configurar los TagHelpers incluir en las dependencias: "Microsoft.AspNet.Mvc.TagHelpers": "6.0.0-rc1-final"
		(Dentro del archivo _ViewImports.cshtml)
	- Para configurar los ViewModels e implementarlos en las vistas, crear una entidad que luego será llamada así desde la vista:
		- Dentro de los objetos html se puede poner:	asp-for="variableClase"	(obtiene el mismo nombre de la variable que se pone)
		- Se puede poner tb a labels y otros elementos para adquirir propiedades
	- Para hacer validaciones, se puede setear por variable del ViewModel. MVC tiene sus validaciones por defecto o las puedes personalizar
		(Validaciones a nivel del servidor)
		Ejemplos: 
		- Usamos el atributo [Required] en la variable que queremos como requerida (no nulos, vacíos)
		- Usamos el atributo [StringLength(max, min)]
	- Para hacer validaciones a nivel de cliente:	uso de dependencias JS jquery-validation + jquery-validation-unobtrusive (en Bower.json)
		- Antes, configurar en la vista de diseño (_Layout.cshtml) una sección para los scripts @RenderSection("Scripts", false)
		  Así, serán utilizados por toda la página web.
		- Una sección puede ser usada por una vista específica, pero se ejecutará realmente en la vista de diseño compartida para 
		  todos (al final de la generación de la página web)
	- Ahora, indicar al sistema cómo mostrar los errores y validaciones:
		- El atributo dentro de los htmls "asp-validation-form" realiza las validaciones que toca por cada atributo del ViewModel
	- Usando llamada de eventos POST y Model Binding: 
		- Recoges información de POST al servidor desde datos obtenidos del formulario
		- Para ello, colocas en el evento de la vista [HttpPost]. También puedes colocar otros de REST. Por defecto es HttpGet
	- Creando un servicio para asociarlo a la aplicación
		- Crear nueva carpeta > Services > Añadir archivo "MailService.cs"
	
4. Bootstrap


5. Entity Framework 7


6. Angular JS
